//蒙特卡洛法求圆周率
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
/*
 利用蒙特卡罗方法计算圆周率，通过投针实验的n次模拟，计算出在边长为1的正方形中，点坐在半径为1的圆中的概率。
 */
double Cal_Pi(const long n)
{
    srand(time(NULL));

    long sum = 0;
    double x = 0.0, y = 0.0;
    for (long i = 0; i < n; i++)
    {
        x = (double)(rand())/(double)RAND_MAX;
        y = (double)(rand())/(double)RAND_MAX;
        if (x*x + y*y <= 1)
        {
            sum++;
        }
        if (i % 10000 == 0)
        {
            system("clear");
            cout<<"运行了"<<i<<"次运算，完成了总运算的"<<(double)i/(double)n*100.0<<"%"<<endl;
        }
    }
    return 4.0*((double)sum/(double)n);
}

int main()
{
    long n = 0;
    cout<<"输入模拟次数:";
    cin>>n;
    if (n <= 0)
    {
        cout<<"输入错误"<<endl;
        exit(1);
    }
    double pi = Cal_Pi(n);
    cout.precision(50);
    cout<<"模拟"<<n<<"次\n圆周率pi = "<<pi<<endl;
    return 0;
}

